ToDo Liste Logik


X KOMPILIERBAR MACHEN!!!
x Funktion, die nur prüft, ob der Tiger/die Ziege auf eine Zelle ziehen kann, OHNE sie zu platzieren. - implementiert, move überprüft nichtmehr ob ein Zug möglich ist,
																										also bitte niemals move aufrufen ohne vorher auf canMoveThere()
																										zu prüfen.
x Überarbeiten Grid/Cell/Game auf Enumerations
                                                          * Save/Load Auf Konsistenz prüfen
                                                          * Doku Englisch
X Unentschieden, falls die Ziege am Zug ist (Am Ende des Tiegerzugs) und nicht ziehen kann - implementiert
                                                          * doku fertig schreiben
* Testprogramm
x Am Ende des Zugs überprüfen, ob ein Spieler gewonnen hat und dann GoatWonException oder TigerWonException werfen. - implementiert
x Exceptions für Tiger gewinnt, Ziege gewinnt und unentschieden (s.o.) implementieren - implementiert
* changed bei Spielende auf false
x PlayerTiger und PlayerGoat müssen sich kennen. ->überladene Konstruktoren und getter/setter implementiert
x PlayerGoat::move () - wenn die Quelle ein Nullpointer ist => Setzen, Wenn es ein gültiger Pointer ist => Ziehen. - implementiert

xCell::removeTiger() implementieren
*Goat darf nur reguläre Züge machen, wenn alle Ziegen gesetzt sind
*Status der Startzellen des Tigers auf tiger setzen


ToDo Liste GUI
* Pfeil/Dreick
* Statusleiste aktualisieren





16.05 simon:

- cursor raus
- game überall zugreifbar, statt global -> game als singleton
- canmove für ziege falls noch nicht gezogen

- Methodennamen getTiger() etwas verwirrend -> getPlayerTiger()

- TODO: dynamische eigenschaften für Zellen, Konstruktor für Zelle direkt status mitübergeben? warum gridpointer übergeben

-canmovethere direkt in move??

_ utf-8 in alert
